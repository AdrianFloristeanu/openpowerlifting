#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Compiles all entries.csv and meet.csv files into the final files.
#

from oplcsv import Csv
import os
import sys


MEETID = 0
def nextmeetid():
    global MEETID
    x = MEETID
    MEETID = MEETID + 1
    return x


# Fills in the Age column from the BirthYear column if possible.
# Inexact ages derived in this way are noted as '.5', for example '23.5',
# designating "either 23 or 24".
def age_from_birthyear(csv, date):
    if not 'BirthYear' in csv.fieldnames:
        return

    if not 'Age' in csv.fieldnames:
        csv.append_column('Age')

    birthyearidx = csv.index('BirthYear')
    ageidx = csv.index('Age')
    [year,month,day] = date.split('-')

    for row in csv.rows:
        if row[birthyearidx] and not row[ageidx]:
            lower_age = int(year) - int(row[birthyearidx]) - 1
            assert lower_age < 100
            assert lower_age > 3
            row[ageidx] = str(lower_age) + '.5'


# Appends to entriescsv and meetscsv, while assigning a MeetID mapping.
def addmeet(entriescsv, meetscsv, entriespath, meetpath):
    newentries = Csv(entriespath)
    newmeet = Csv(meetpath)

    assert "MeetID" in entriescsv.fieldnames
    assert "MeetID" in meetscsv.fieldnames
    assert not "MeetID" in newentries.fieldnames
    assert not "MeetID" in newmeet.fieldnames

    meetid = str(nextmeetid())

    newentries.append_column('MeetID')
    idx = newentries.index('MeetID')
    for row in newentries.rows:
        row[idx] = meetid

    newmeet.append_column('MeetID')
    idx = newmeet.index('MeetID')
    for row in newmeet.rows:
        row[idx] = meetid

    # Derive the path (e.g., "uspa/0039").
    # Input looks like "meet-path/uspa/0039/meet.csv".
    assert not "MeetPath" in newmeet.fieldnames
    path = meetpath[meetpath.index(os.sep)+1 : meetpath.rindex(os.sep)].replace(os.sep,'/')
    assert not ',' in path

    newmeet.append_column("MeetPath")
    idx = newmeet.index("MeetPath")
    for row in newmeet.rows:
        row[idx] = path

    age_from_birthyear(newentries, newmeet.rows[0][newmeet.index('Date')])

    entriescsv.cat(newentries)
    meetscsv.cat(newmeet)


def main(builddir, meetdir):
    entriescsv = Csv()
    meetscsv = Csv()

    # Standardize the column order by hardcoding it here.
    # This is necessary for SQL import statements to work.
    # If this list is modified, also modify scripts/compile-sqlite.
    entriescsv.append_column('MeetID')
    entriescsv.append_column('Name')
    entriescsv.append_column('Sex')
    entriescsv.append_column('Event')
    entriescsv.append_column('Equipment')
    entriescsv.append_column('Age')
    entriescsv.append_column('Division')
    entriescsv.append_column('BodyweightKg')
    entriescsv.append_column('WeightClassKg')
    entriescsv.append_column('Squat1Kg')
    entriescsv.append_column('Squat2Kg')
    entriescsv.append_column('Squat3Kg')
    entriescsv.append_column('Squat4Kg')
    entriescsv.append_column('BestSquatKg')
    entriescsv.append_column('Bench1Kg')
    entriescsv.append_column('Bench2Kg')
    entriescsv.append_column('Bench3Kg')
    entriescsv.append_column('Bench4Kg')
    entriescsv.append_column('BestBenchKg')
    entriescsv.append_column('Deadlift1Kg')
    entriescsv.append_column('Deadlift2Kg')
    entriescsv.append_column('Deadlift3Kg')
    entriescsv.append_column('Deadlift4Kg')
    entriescsv.append_column('BestDeadliftKg')
    entriescsv.append_column('TotalKg')
    entriescsv.append_column('Place')
    entriescsv.append_column('Wilks')
    entriescsv.append_column('McCulloch')
    initial_entriescsv_num_columns = len(entriescsv.fieldnames)

    meetscsv.append_column('MeetID')
    meetscsv.append_column('MeetPath')
    meetscsv.append_column('Federation')
    meetscsv.append_column('Date')
    meetscsv.append_column('MeetCountry')
    meetscsv.append_column('MeetState')
    meetscsv.append_column('MeetTown')
    meetscsv.append_column('MeetName')
    initial_meetscsv_num_columns = len(meetscsv.fieldnames)

    for dirname, subdirs, files in os.walk(meetdir):
        # Modifying `subdirs` in-place will cause the next iteration of the os.walk()
        # generator to operate over the sorted list.
        subdirs.sort()

        if 'entries.csv' in files:
            assert 'meet.csv' in files
            entriespath = dirname + os.sep + 'entries.csv'
            meetpath = dirname + os.sep + 'meet.csv'
            addmeet(entriescsv, meetscsv, entriespath, meetpath)

    # Remove some columns that are allowed as data but are ignored.
    entriescsv.remove_column_by_name("BirthYear");
    entriescsv.remove_column_by_name("Country");
    entriescsv.remove_column_by_name("School");
    entriescsv.remove_column_by_name("Team");
    entriescsv.remove_column_by_name("State");
    entriescsv.remove_column_by_name("InternationalName");
    entriescsv.remove_column_by_name("Country-State");
    entriescsv.remove_column_by_name("College/University");

    oplcsvpath = builddir + os.sep + 'openpowerlifting.csv'
    meetscsvpath = builddir + os.sep + 'meets.csv'

    with open(oplcsvpath, 'w') as fd:
        entriescsv.write(fd)
    with open(meetscsvpath, 'w') as fd:
        meetscsv.write(fd)

    # If these asserts fail, then new columns have been added.
    # Check the written files: new columns are at the end.
    # Columns need to be explicitly added above to be in a known order,
    # and then scripts/compile-sqlite needs to be notified of the column type.
    assert len(entriescsv.fieldnames) == initial_entriescsv_num_columns
    assert len(meetscsv.fieldnames) == initial_meetscsv_num_columns


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print(' Usage: %s builddir meetdir' % sys.argv[0], file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
